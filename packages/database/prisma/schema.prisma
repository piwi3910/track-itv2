generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  password             String
  firstName            String
  lastName             String
  avatar               String?
  bio                  String?
  timezone             String               @default("UTC")
  theme                String               @default("system")
  role                 Role                 @default(USER)
  isActive             Boolean              @default(true)
  lastLogin            DateTime?
  
  // Notification preferences
  emailNotifications   Boolean              @default(true)
  mentionNotifications Boolean              @default(true)
  taskNotifications    Boolean              @default(true)
  projectNotifications Boolean              @default(true)
  
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  createdTasks         Task[]               @relation("TaskCreator")
  assignedTasks        Task[]               @relation("TaskAssignee")
  comments             Comment[]
  activities           Activity[]
  attachments          Attachment[]
  projectMembers       ProjectMember[]
  notifications        Notification[]
  
  @@index([email])
  @@map("users")
}

model Project {
  id                   String               @id @default(cuid())
  name                 String
  description          String?
  color                String               @default("#3B82F6")
  icon                 String?
  isActive             Boolean              @default(true)
  startDate            DateTime?
  endDate              DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  tasks                Task[]
  members              ProjectMember[]
  categories           Category[]
  
  @@index([name])
  @@map("projects")
}

model ProjectMember {
  id                   String               @id @default(cuid())
  userId               String
  projectId            String
  role                 ProjectRole          @default(MEMBER)
  joinedAt             DateTime             @default(now())
  
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  project              Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@map("project_members")
}

model Category {
  id                   String               @id @default(cuid())
  name                 String
  color                String               @default("#6B7280")
  projectId            String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  project              Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks                Task[]
  
  @@unique([name, projectId])
  @@index([projectId])
  @@map("categories")
}

model Task {
  id                   String               @id @default(cuid())
  title                String
  description          String?
  priority             Priority             @default(MEDIUM)
  status               TaskStatus           @default(TODO)
  dueDate              DateTime?
  estimatedHours       Float?
  actualHours          Float?
  completedAt          DateTime?
  projectId            String
  categoryId           String?
  creatorId            String
  assigneeId           String?
  parentId             String?
  position             Int                  @default(0)
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  project              Project              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category             Category?            @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  creator              User                 @relation("TaskCreator", fields: [creatorId], references: [id])
  assignee             User?                @relation("TaskAssignee", fields: [assigneeId], references: [id])
  parent               Task?                @relation("TaskSubtasks", fields: [parentId], references: [id])
  subtasks             Task[]               @relation("TaskSubtasks")
  
  comments             Comment[]
  attachments          Attachment[]
  activities           Activity[]
  
  @@index([projectId])
  @@index([categoryId])
  @@index([creatorId])
  @@index([assigneeId])
  @@index([status])
  @@index([priority])
  @@index([dueDate])
  @@map("tasks")
}

model Comment {
  id                   String               @id @default(cuid())
  content              String
  taskId               String
  userId               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  
  task                 Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id])
  
  @@index([taskId])
  @@index([userId])
  @@map("comments")
}

model Attachment {
  id                   String               @id @default(cuid())
  filename             String
  originalName         String
  mimeType             String
  size                 Int
  path                 String
  taskId               String
  userId               String
  createdAt            DateTime             @default(now())
  
  task                 Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id])
  
  @@index([taskId])
  @@index([userId])
  @@map("attachments")
}

model Activity {
  id                   String               @id @default(cuid())
  type                 ActivityType
  description          String
  metadata             Json?
  taskId               String
  userId               String
  createdAt            DateTime             @default(now())
  
  task                 Task                 @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user                 User                 @relation(fields: [userId], references: [id])
  
  @@index([taskId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("activities")
}

model Notification {
  id                   String               @id @default(cuid())
  type                 NotificationType
  title                String
  message              String
  metadata             Json?
  userId               String
  isRead               Boolean              @default(false)
  readAt               DateTime?
  createdAt            DateTime             @default(now())
  
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum Role {
  ADMIN
  USER
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum ActivityType {
  TASK_CREATED
  TASK_UPDATED
  TASK_DELETED
  TASK_ASSIGNED
  TASK_UNASSIGNED
  TASK_STATUS_CHANGED
  TASK_PRIORITY_CHANGED
  COMMENT_ADDED
  COMMENT_UPDATED
  COMMENT_DELETED
  ATTACHMENT_ADDED
  ATTACHMENT_DELETED
}

enum NotificationType {
  TASK_ASSIGNED
  TASK_DUE_SOON
  TASK_OVERDUE
  COMMENT_MENTION
  PROJECT_INVITATION
  SYSTEM_UPDATE
}